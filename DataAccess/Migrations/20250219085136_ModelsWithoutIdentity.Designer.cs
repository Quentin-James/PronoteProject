// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(DbDataAccess))]
    [Migration("20250219085136_ModelsCompletSansIdentity")]
    partial class ModelsCompletSansIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date_debut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_fin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Justifie")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("Models.Classe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Id_school")
                        .HasColumnType("int");

                    b.Property<string>("Niveau")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolsId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Models.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacité")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassesId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassroomsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date_debut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_fin")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_classe")
                        .HasColumnType("int");

                    b.Property<int>("Id_classroom")
                        .HasColumnType("int");

                    b.Property<int>("Id_teacher")
                        .HasColumnType("int");

                    b.Property<int?>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassesId");

                    b.HasIndex("ClassroomsId");

                    b.HasIndex("TeachersId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date_Note")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_student")
                        .HasColumnType("int");

                    b.Property<int>("Id_subject")
                        .HasColumnType("int");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<int?>("StudentsId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Models.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Id_user")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telephone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date_de_Naissance")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_classe")
                        .HasColumnType("int");

                    b.Property<int>("Id_user")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sexe")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClassesId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Models.StudentParent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentParents");
                });

            modelBuilder.Entity("Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Id_school")
                        .HasColumnType("int");

                    b.Property<int>("Id_subject")
                        .HasColumnType("int");

                    b.Property<int>("Id_user")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolsId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectsId")
                        .HasColumnType("int");

                    b.Property<int>("Telephone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Models.Classe", b =>
                {
                    b.HasOne("Models.School", "Schools")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolsId");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("Models.Course", b =>
                {
                    b.HasOne("Models.Classe", "Classes")
                        .WithMany("Courses")
                        .HasForeignKey("ClassesId");

                    b.HasOne("Models.Classroom", "Classrooms")
                        .WithMany("Courses")
                        .HasForeignKey("ClassroomsId");

                    b.HasOne("Models.Teacher", "Teachers")
                        .WithMany("Courses")
                        .HasForeignKey("TeachersId");

                    b.Navigation("Classes");

                    b.Navigation("Classrooms");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Models.Grade", b =>
                {
                    b.HasOne("Models.Student", "Students")
                        .WithMany("Grades")
                        .HasForeignKey("StudentsId");

                    b.HasOne("Models.Subject", "Subjects")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectsId");

                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Models.Student", b =>
                {
                    b.HasOne("Models.Classe", "Classes")
                        .WithMany("Students")
                        .HasForeignKey("ClassesId");

                    b.Navigation("Classes");
                });

            modelBuilder.Entity("Models.StudentParent", b =>
                {
                    b.HasOne("Models.Parent", "Parent")
                        .WithMany("StudentParents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Student", "Student")
                        .WithMany("StudentParents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.Teacher", b =>
                {
                    b.HasOne("Models.School", "Schools")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolsId");

                    b.HasOne("Models.Subject", "Subjects")
                        .WithMany("Teachers")
                        .HasForeignKey("SubjectsId");

                    b.Navigation("Schools");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Models.Classe", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Models.Classroom", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Models.Parent", b =>
                {
                    b.Navigation("StudentParents");
                });

            modelBuilder.Entity("Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentParents");
                });

            modelBuilder.Entity("Models.Subject", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Models.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
